AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  python3.9
  Sample SAM Template for !Sub simple-dataset-generating-supporter

Globals:
  Function:
    Timeout: 30
    MemorySize: 128
  Api:
    Cors:
      AllowOrigin: "'*'"
      AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
      AllowHeaders: "'*'"

Resources:
  MyBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-image
      AccessControl: Private
      VersioningConfiguration:
        Status: Enabled

  MyLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-lambda-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: AllowS3Object
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource: !Sub "arn:aws:s3:::${MyBucket}/*"
              - Sid: AllowS3List
                Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !Sub "arn:aws:s3:::${MyBucket}"

  PingFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-ping
      PackageType: Image
      ImageConfig:
        Command: [ "app.ping" ]
      Architectures:
        - x86_64
      Events:
        MyApiGateway:
          Type: Api
          Properties:
            Path: /ping
            Method: get
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./api
      DockerTag: python3.9-v1

  ListFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-list
      PackageType: Image
      Role: !GetAtt MyLambdaRole.Arn
      ImageConfig:
        Command: [ "app.list" ]
      Architectures:
        - x86_64
      Events:
        MyApiGateway:
          Type: Api
          Properties:
            Path: /image/list
            Method: get
      Environment:
        Variables:
          MY_BUCKET_NAME: !Ref MyBucket
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./api
      DockerTag: python3.9-v1

  FetchFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-fetch
      PackageType: Image
      Role: !GetAtt MyLambdaRole.Arn
      ImageConfig:
        Command: [ "app.fetch" ]
      Architectures:
        - x86_64
      Events:
        MyApiGateway:
          Type: Api
          Properties:
            Path: /image/fetch
            Method: get
      Environment:
        Variables:
          MY_BUCKET_NAME: !Ref MyBucket
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./api
      DockerTag: python3.9-v1

  UploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-upload
      PackageType: Image
      Role: !GetAtt MyLambdaRole.Arn
      ImageConfig:
        Command: [ "app.upload" ]
      Architectures:
        - x86_64
      Events:
        MyApiGateway:
          Type: Api
          Properties:
            Path: /image/upload
            Method: post
      Environment:
        Variables:
          MY_BUCKET_NAME: !Ref MyBucket
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./api
      DockerTag: python3.9-v1

  DeleteFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-delete
      PackageType: Image
      Role: !GetAtt MyLambdaRole.Arn
      ImageConfig:
        Command: [ "app.delete" ]
      Architectures:
        - x86_64
      Events:
        MyApiGateway:
          Type: Api
          Properties:
            Path: /image/delete
            Method: delete
      Environment:
        Variables:
          MY_BUCKET_NAME: !Ref MyBucket
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./api
      DockerTag: python3.9-v1

  TruncateFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-truncate
      PackageType: Image
      Role: !GetAtt MyLambdaRole.Arn
      ImageConfig:
        Command: [ "app.truncate" ]
      Architectures:
        - x86_64
      Events:
        MyApiGateway:
          Type: Api
          Properties:
            Path: /image/truncate
            Method: delete
      Environment:
        Variables:
          MY_BUCKET_NAME: !Ref MyBucket
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./api
      DockerTag: python3.9-v1

  DownloadFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-download
      PackageType: Image
      Role: !GetAtt MyLambdaRole.Arn
      ImageConfig:
        Command: [ "app.download" ]
      Architectures:
        - x86_64
      Events:
        MyApiGateway:
          Type: Api
          Properties:
            Path: /image/download
            Method: get
      Environment:
        Variables:
          MY_BUCKET_NAME: !Ref MyBucket
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./api
      DockerTag: python3.9-v1

  ResetFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-reset
      PackageType: Image
      Role: !GetAtt MyLambdaRole.Arn
      ImageConfig:
        Command: [ "app.reset" ]
      Architectures:
        - x86_64
      Events:
        ScheduleEvent:
          Type: Schedule
          Properties:
            Schedule: cron(0 0 ? * MON *)
      Environment:
        Variables:
          MY_BUCKET_NAME: !Ref MyBucket
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./api
      DockerTag: python3.9-v1

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  MyApiGateway:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"
  PingFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt PingFunction.Arn
  PingFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt PingFunctionRole.Arn
